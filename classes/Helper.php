<?php
/*
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

Copyright 2016 Rimas Kudelis <rq@akl.lt>.
*/

namespace RQ\IssueManager;

if (!class_exists('RQ\IssueManager\Helper')) {

    class Helper {

        const TEXTDOMAIN = 'rq-issue-manager';

        /**
         * Generates the fields HTML for a meta box.
         */
        public static function generate_fields($post_id, $fields) {
            $output = '';
            foreach ($fields as $field) {
                $label = '<label for="' . $field['id'] . '">' . esc_html($field['label']) . '</label>';
                $db_value = get_post_meta($post_id, $field['id'], true);
                switch ($field['type']) {
                    case 'media':
                        $input = sprintf(
                            '<input id="%s" name="%s" type="text" value="%s"> <input class="button issue-media-upload-button" id="%s_button" name="%s_button" type="button" value="%s" />',
                            $field['id'],
                            $field['id'],
                            $db_value,
                            $field['id'],
                            $field['id'],
                            esc_attr(__('Upload', self::TEXTDOMAIN))
                        );
                        break;
                    case 'date_inexact':
                        $input = sprintf(
                            '<input id="%s" name="%s" type="text" placeholder="%s" pattern="[0-9]{4}(-(0[1-9]|1[012])(-(0[1-9]|1[0-9]|2[0-9]|3[01]))?)?" value="%s">',
                            $field['id'],
                            $field['id'],
                            esc_attr(__('YYYY[-mm[-dd]]', self::TEXTDOMAIN)),
                            $db_value
                        );
                        break;
                    default:
                        $input = sprintf(
                            '<input id="%s" name="%s" type="%s" value="%s">',
                            $field['id'],
                            $field['id'],
                            $field['type'],
                            $db_value
                        );
                        break;
                }
                $output .= '<p>' . $label . '<br>' . $input . '</p>';
            }
            return $output;
        }

        /**
         * Save post meta for fields previously generated by this helper.
         */
        public static function save_post_meta ($post_id, $fields) {
            foreach ($fields as $field) {
                if (isset($_POST[$field['id']])) {
                    switch ($field['type']) {
                        case 'email':
                            $_POST[$field['id']] = sanitize_email($_POST[$field['id']]);
                            break;
                        case 'text':
                            $_POST[$field['id']] = sanitize_text_field($_POST[$field['id']]);
                            break;
                        case 'date_inexact':
                            if (!Helper::validate_inexact_date($_POST[$field['id']])) {
                                unset ($_POST[$field['id']]);
                            }
                            break;
                    }
                    update_post_meta($post_id, $field['id'], $_POST[$field['id']]);
                } else if ($field['type'] === 'checkbox') {
                    update_post_meta($post_id, $field['id'], '0');
                }
            }
        }

        /**
         * Validates a date in 'YYYY[-mm[-dd]]' format (year with optional month and day).
         */
        public static function validate_inexact_date($dateString) {
            $year = $month = $day = 1;
            $dateParts = explode('-', $dateString);

            switch(count($dateParts)) {
                case 3:
                    $day = $dateParts[2];
                case 2:
                    $month = $dateParts[1];
                case 1:
                    $year = $dateParts[0];
                    break;
                default:
                    return false;
            }

            return checkdate($month, $day, $year);
        }

        /**
         * Formats a date passed as a string according to one of the supplied formats.
         */
        public static function format_inexact_date($dateString, $format_ymd, $format_ym, $format_y) {
            switch(strlen($dateString)) {
                case 4:
                    $useFormat = $format_y;
                    $dateString = $dateString . '-01-01'; // avoid treating the year as HHMM
                    break;
                case 7:
                    $useFormat = $format_ym;
                    break;
                default:
                    $useFormat = $format_ymd;
                    break;
            }

            $date = new DateTime($dateString);

            return date_i18n($useFormat, $date->getTimestamp());
        }
    }
}